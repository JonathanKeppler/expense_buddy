rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /{document=**} {
      allow read, write: if false;
    }

    match /expenses/{expense} {
      allow read: if request.auth != null &&
        request.auth.uid in resource.data.users;

      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.users;
    }

    match /expenseTypes/{expenseType} {
      allow read: if !resource.data.isScoped ||
        request.auth.uid in resource.data.scopedUsers;

      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.scopedUsers;

      allow update: if request.auth != null &&
        request.auth.uid in resource.data.scopedUsers;

      match /expenseTypeSubTypes/{expenseTypeSubType} {
        allow read: if (get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.isScoped == false ||
          request.auth.uid in get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.scopedUsers) &&
          (resource.data.isScoped == false ||
          request.auth.uid in resource.data.scopedUsers);

        allow create: if (get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.isScoped == false ||
          request.auth.uid in get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.scopedUsers)
      }
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
  }
}