rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function hasOnlyLinkedUsers(authId) {
      return request.resource.data.scopedUsers.hasOnly(get(/databases/$(database)/documents/users/$(authId)).data.linkedUsers.concat([request.auth.uid]));
    }

    function isAuthenticated(auth) {
      return request.auth != null;
    }

    function isScopedToUser(authId) {
      return request.auth.uid in resource.data.scopedUsers;
    }

    function isScopedUsersUnchanged() {
      return request.resource.data.scopedUsers == resource.data.scopedUsers;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    match /expenses/{expense} {
      allow read: if isAuthenticated(request.auth) &&
        request.auth.uid in resource.data.scopedUsers;
      
      allow create: if isAuthenticated(request.auth) &&
        hasOnlyLinkedUsers(request.auth.uid);
        

      allow update: if isAuthenticated(request.auth) &&
        isScopedToUser(request.auth.id) &&
        isScopedUsersUnchanged();

      allow delete: if isAuthenticated(request.auth) &&
        request.auth.uid in resource.data.scopedUsers;
    }

    match /expenseTypes/{expenseType} {
      allow read: if isAuthenticated(request.auth) &&
        (!resource.data.isScoped ||
          isScopedToUser(request.auth.id));

      allow create: if isAuthenticated(request.auth) &&
        hasOnlyLinkedUsers(request.auth.uid);

      allow update: if isAuthenticated(request.auth) &&
        isScopedToUser(request.auth.id) &&
        hasOnlyLinkedUsers(request.auth.uid) &&
        isScopedUsersUnchanged();

      allow delete: if resource.data.isScoped == true &&
        isAuthenticated(request.auth) &&
        isScopedToUser(request.auth.id)

      match /expenseTypeSubTypes/{expenseTypeSubType} {
        allow read: if (get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.isScoped == false ||
          request.auth.uid in get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.scopedUsers) &&
          (resource.data.isScoped == false ||
            isScopedToUser(request.auth.id));

        allow create: if (get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.isScoped == false ||
          request.auth.uid in get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.scopedUsers) &&
          isAuthenticated(request.auth) &&
          hasOnlyLinkedUsers(request.auth.uid);

        allow update: if (get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.isScoped == false ||
          request.auth.uid in get(/databases/$(database)/documents/expenseTypes/$(expenseType)).data.scopedUsers) &&
          isAuthenticated(request.auth) &&
          isScopedToUser(request.auth.id) &&
          isScopedUsersUnchanged();
      }
    }

    match /users/{userId} {
      allow read, write: if isAuthenticated(request.auth) &&
      request.auth.uid == userId;
    }
  }
}